logging {
  level  = "info"
  format = "logfmt"
}

// Enable this section to carry out live debugging when configuring Alloy.
livedebugging {
    enabled = true
}

// Set up Prometheus scraping for the ecommerce app /metrics endpoint
// This component scrapes the Mythical application, defining unique prometheus labels.
prometheus.scrape "ecommerce_app" {
    // Scrape from the ecommerce app requester and server services, and add them to the correct group and service name.
    targets = [
        {"__address__" = "ecommerce-app:3000", group = "ecommerce_app", service = "ecommerce_frontend"},
    ]
    // We need a scrape interval and timeout of 2s as we want reactive metric data.
    scrape_interval = "2s"
    scrape_timeout = "2s"
    // Send the metrics to the prometheus remote write receiver for exporting to Mimir.
    forward_to = [prometheus.remote_write.mimir.receiver]
    // Attach the job name to the metrics.
    job_name = "ecommerce_app"
}

// The prometheus.remote_write component defines an endpoint for remotely writing metrics to.
// In this case, our locally running Mimir service.
prometheus.remote_write "mimir" {
    endpoint {
      name = "cloud-prometheus"
      url  = env("GRAFANA_CLOUD_PROMETHEUS_ENDPOINT")
  
      basic_auth {
        username = env("GRAFANA_CLOUD_PROMETHEUS_USER")
        password = env("GRAFANA_CLOUD_OTLP_TOKEN")
      }
    }
}

// Configuration for OTEL metrics, logs, traces
otelcol.receiver.otlp "default" {
  grpc {
    endpoint = "0.0.0.0:4317" // Listen for gRPC on port 4317
  }
  http {
    endpoint = "0.0.0.0:4318" // Listen for HTTP on port 4318
  }
  output {
    metrics = [otelcol.processor.batch.default.input]
    logs    = [otelcol.processor.batch.default.input]
    traces  = [otelcol.processor.batch.default.input]
  }
}

otelcol.processor.batch "default" {
  output {
    metrics = [otelcol.exporter.otlphttp.default.input]
    logs    = [otelcol.exporter.otlphttp.default.input]
    traces  = [otelcol.exporter.otlphttp.default.input]
  }
}

otelcol.exporter.otlphttp "default" {
  client {
    endpoint = env("GRAFANA_CLOUD_OTLP_ENDPOINT")
    auth     = otelcol.auth.basic.grafana_cloud.handler
  }
}

otelcol.auth.basic "grafana_cloud" {
  username = env("GRAFANA_CLOUD_OTLP_USER")
  password = env("GRAFANA_CLOUD_OTLP_TOKEN")
}